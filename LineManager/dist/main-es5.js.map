{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/sockets/socket.component.ts","webpack:///src/app/components/sockets/socket.component.html","webpack:///src/app/services/websocket/socket.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","RouterModule","forRoot","NgModule","imports","AppComponent","socketService","note","setupSocketConnection","Component","selector","templateUrl","styleUrls","AppModule","SocketComponent","SocketioService","BrowserModule","FormsModule","declarations","providers","bootstrap","Message","sender","content","isBroadcast","serverMessages","Array","clientMessage","getMessages","sendMessage","send","ViewChild","environment","production","SOCKET_ENDPOINT","socket","io","emit","on","data","console","log","message","Injectable","providedIn","enableProdMode","platformBrowser","bootstrapModule","catch","err","error"],"mappings":";;;;;;;;;;;;;;;;;AAAA,aAASA,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,aAAOC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,YAAIC,CAAC,GAAG,IAAIC,KAAJ,CAAU,yBAAyBL,GAAzB,GAA+B,GAAzC,CAAR;AACAI,SAAC,CAACE,IAAF,GAAS,kBAAT;AACA,cAAMF,CAAN;AACA,OAJM,CAAP;AAKA;;AACDL,4BAAwB,CAACQ,IAAzB,GAAgC,YAAW;AAAE,aAAO,EAAP;AAAY,KAAzD;;AACAR,4BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAS,UAAM,CAACC,OAAP,GAAiBV,wBAAjB;AACAA,4BAAwB,CAACW,EAAzB,GAA8B,yCAA9B;;;;;;;;;;;;;;;;;;;;ACZA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;;;;;AAGA,QAAMC,MAAM,GAAW,EAAvB;;QAMaC,gB;;;;AAJb;;YAIaA;;;;yBAAAA,gB;AAAgB,O;AAAA,gBAHlB,CAAC,SAAAC,YAAA,CAAaC,OAAb,CAAqBH,MAArB,CAAD,CAGkB,EAFjB,SAAAE,YAEiB;;;;+EAAhBD,gB,EAAgB;AAAA;AAAA,kBAFjB,SAAAC,YAEiB;AAAA,O;AAFL,K;;;;;2BAEXD,gB,EAAgB;cAJ5B,OAAAG,QAI4B;eAJnB;AACRC,iBAAO,EAAE,CAAC,SAAAH,YAAA,CAAaC,OAAb,CAAqBH,MAArB,CAAD,CADD;AAERF,iBAAO,EAAE,CAAC,SAAAI,YAAD;AAFD,S;AAImB,Q;;;;;;;;;;;;;;;;;;;;;;ACV7B;AAAA;AAAA;;;;;;;;;;;;;;;;;;QAQaI,Y;;;AAGX,4BAAoBC,aAApB,EAAoD;AAAA;;AAAhC,aAAAA,aAAA,GAAAA,aAAA;AAFpB,aAAAC,IAAA,GAAO,wBAAP;AAEsD;;;;mCAE3C;AACT,eAAKD,aAAL,CAAmBE,qBAAnB;AACD;;;;;;AAZH;;;uBAKaH,Y,EAAY,wC;AAAA,K;;;YAAZA,Y;AAAY,gC;AAAA,c;AAAA,a;AAAA;AAAA;ACAzB;AACA;;;;;;;;;2BDDaA,Y,EAAY;cALxB,OAAAI,SAKwB;eALd;AACTC,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,sBAFJ;AAGTC,mBAAS,EAAE,CAAC,qBAAD;AAHF,S;AAKc,Q;;;;;;;;;;;;;;;;;;;;;;;;;;AERzB;AAAA;AAAA;;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;QAkBaC,S;;;;AAhBb;;YAgBaA,S;AAAS,kBAJlB,gBAAAR,YAIkB,EAHlB,mBAAAS,eAGkB;;;;yBAATD,S;AAAS,O;AAAA,iBANT,CAAC,iBAAAE,eAAD,C;AAAiB,gBALnB,CACP,mBAAAC,aADO,EAEP,qBAAAhB,gBAFO,EAGP,QAAAiB,WAHO,CAKmB;;;;+EAMjBJ,S,EAAS;AAAA,uBAdlB,gBAAAR,YAckB,EAblB,mBAAAS,eAakB;AAbH,kBAGf,mBAAAE,aAHe,EAIf,qBAAAhB,gBAJe,EAKf,QAAAiB,WALe;AAaG,O;AARP,K;;;;;2BAQFJ,S,EAAS;cAhBrB,OAAAV,QAgBqB;eAhBZ;AACRe,sBAAY,EAAE,CACZ,gBAAAb,YADY,EAEZ,mBAAAS,eAFY,CADN;AAKRV,iBAAO,EAAE,CACP,mBAAAY,aADO,EAEP,qBAAAhB,gBAFO,EAGP,QAAAiB,WAHO,CALD;AAURE,mBAAS,EAAE,CAAC,iBAAAJ,eAAD,CAVH;AAWRK,mBAAS,EAAE,CACT,gBAAAf,YADS,EAET,mBAAAS,eAFS;AAXH,S;AAgBY,Q;;;;;;;;;;;;;;;;;;;;;;ACxBtB;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;ACWQ;AACI;AACI;AAAM;AAAiB;AAC3B;AACJ;;;;;AAFc;AAAA;;;;QDTTO,O,GACT,iBACWC,MADX,EAEWC,OAFX,EAG8B;AAAA,UAAnBC,WAAmB,uEAAL,KAAK;;AAAA;;AAFnB,WAAAF,MAAA,GAAAA,MAAA;AACA,WAAAC,OAAA,GAAAA,OAAA;AACA,WAAAC,WAAA,GAAAA,WAAA;AACN,K;;AALT;;QAaaV,e;;;AAUT,+BAAoBR,aAApB,EAAoD;AAAA;;AAAhC,aAAAA,aAAA,GAAAA,aAAA;AAPb,aAAAmB,cAAA,GAAiB,IAAIC,KAAJ,EAAjB;AAEA,aAAAC,aAAA,GAAgB,EAAhB;AACA,aAAAH,WAAA,GAAc,KAAd;AACA,aAAAF,MAAA,GAAS,EAAT;;AAYA,aAAAM,WAAA,GAAc,YAAM,CACvB;AACA;AACA;AACA;AACA;AACH,SANM;AAT+C;;;;+BAG3C;AACP;AACA,eAAKtB,aAAL,CAAmBuB,WAAnB,CAA+B,KAAKF,aAApC;AACA,eAAKA,aAAL,GAAqB,EAArB;AACH;;;;;;AAtBL;;;uBAKab,e,EAAe,wC;AAAA,K;;;YAAfA,e;AAAe,6B;AAAA;AAAA;;;;;;;;;;;;;;;AClB5B;AACI;AAEA;AACI;AAAM;AAAA,mBAAU,IAAAgB,IAAA,EAAV;AAAgB,WAAhB;AACF;AAAsE;AAAA;AAAA;AAAtE;AACA;AACI;AAA0B;AAAI;AAClC;AACJ;AACJ;AACA;AACI;AAKJ;AACJ;;;;AAbkF;AAAA;AAOrE;AAAA;;;;;;;;;2BDMAhB,e,EAAe;cAL3B,OAAAL,SAK2B;eALjB;AACPC,kBAAQ,EAAE,QADH;AAEPC,qBAAW,EAAE,yBAFN;AAGPC,mBAAS,EAAE,CAAC,yBAAD;AAHJ,S;AAKiB,Q;;;;;;gBACvB,OAAAmB,S;iBAAU,Q;;;;;;;;;;;;;;;;;;;;;;;;AEnBf;AAAA;AAAA;;AACA;AAAA;AAAA;;;;;;AAEa,YAAAC,WAAA,GAAc;AAC1BC,gBAAU,EAAE,KADc;AAE1BC,qBAAe,EAAE;AAFS,KAAd;;QASAnB,e;;;AAGX,iCAAc;AAAA;AAAK;;;;gDAGK;AACtB,eAAKoB,MAAL,GAAc,mBAAAC,EAAA,CAAG,QAAAJ,WAAA,CAAYE,eAAf,CAAd;AACA,eAAMC,MAAN,CAAaE,IAAb,CAAkB,WAAlB,EAA+B,OAA/B;AAEA,eAAKF,MAAL,CAAYG,EAAZ,CAAe,UAAf,EAA2B,UAACC,IAAD,EAAkB;AAC3CC,mBAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,WAFD;AAID;;;oCAEWG,O,EAAiB,CAE5B;;;;;;AAtBH;;;uBAIa3B,e;AAAe,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAHd;;;;;2BAGDA,e,EAAe;cAJ3B,OAAA4B,UAI2B;eAJhB;AACVC,oBAAU,EAAE;AADF,S;AAIgB,Q;;;;;;;;;;;;;;;;;;kBCZ5B;AACA;AACA;;;;;AAEa,YAAAZ,WAAA,GAAc;AACzBC,gBAAU,EAAE;AADa,KAAd;AAIb;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;ACfA;AAAA;AAAA;;AAIA;AAAA;AAAA;;;;;;;;;;AAEA,QAAI,cAAAD,WAAA,CAAYC,UAAhB,EAA4B;AAC1B,aAAAY,cAAA;AACD;;AAED,wBAAAC,eAAA,GAAyBC,eAAzB,CAAyC,mBAAD,UAAxC,EACGC,KADH,CACS,UAAAC,GAAG;AAAA,aAAIT,OAAO,CAACU,KAAR,CAAcD,GAAd,CAAJ;AAAA,KADZ","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\nimport { SocketioService } from './services/websocket/socket.service';\r\n\r\n@Component({\r\n  selector: 'mean-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  note = 'Client app is running!';\r\n\r\n  constructor(private socketService: SocketioService) {}\r\n  \r\n  ngOnInit() {\r\n    this.socketService.setupSocketConnection();\r\n  }\r\n}\r\n","<!-- <div style=\"text-align:center\" class=\"content\">\r\n  <img width=\"400\" alt=\"Angular Logo\" src=\"assets/images/mean_stack_banner.png\">\r\n  <span style=\"display: block\"> {{ note }} </span>\r\n  <br>\r\n  <h4>For more info, visit <a href=\"https://github.com/agonxgashi/MEAN-template\">Github</a> repository</h4>\r\n\r\n</div> -->\r\n\r\n<socket></socket>\r\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { SocketComponent } from './components/sockets/socket.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SocketioService } from './services/websocket/socket.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    SocketComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n  ],\r\n  providers: [SocketioService],\r\n  bootstrap: [\r\n    AppComponent,\r\n    SocketComponent\r\n  ]\r\n})\r\nexport class AppModule { }\r\n","\r\nimport { Component, ViewChild, ElementRef} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { SocketioService } from 'src/app/services/websocket/socket.service';\r\n\r\nexport class Message {\r\n    constructor(\r\n        public sender: string,\r\n        public content: string,\r\n        public isBroadcast = false,\r\n    ) { }\r\n}\r\n\r\n@Component({\r\n    selector: 'socket',\r\n    templateUrl: './socket.component.html',\r\n    styleUrls: ['./socket.component.scss']\r\n})\r\nexport class SocketComponent {\r\n    @ViewChild('viewer') private viewer: ElementRef;\r\n\r\n    public serverMessages = new Array<Message>();\r\n\r\n    public clientMessage = '';\r\n    public isBroadcast = false;\r\n    public sender = '';\r\n\r\n\r\n    constructor(private socketService: SocketioService) {}\r\n\r\n\r\n    public send(): void {\r\n        // this.socket.emit('new-message', this.clientMessage);\r\n        this.socketService.sendMessage(this.clientMessage)\r\n        this.clientMessage = '';\r\n    }\r\n\r\n    public getMessages = () => {\r\n        // return Observable.create((observer) => {\r\n        //         this.socket.on('new-message', (message) => {\r\n        //             observer.next(message);\r\n        //         });\r\n        // });\r\n    }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"header\">\r\n    </div>\r\n    <div class=\"footer\">\r\n        <form (submit)=\"send()\">\r\n            <input name=\"clientMessage\" placeholder=\"Write a message\" type=\"text\" [(ngModel)]=\"clientMessage\">\r\n            <button mat-fab type=\"submit\">\r\n                <i class=\"material-icons\">send</i>\r\n            </button>\r\n        </form>\r\n    </div>\r\n    <div>\r\n        <div *ngFor=\"let msg of serverMessages\">\r\n            <div class=\"content\">\r\n                <span>{{ msg.content }}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { Injectable } from '@angular/core';\nimport { io, Socket } from 'socket.io-client';\n\nexport const environment = {  \n\tproduction: false,  \n\tSOCKET_ENDPOINT: 'http://localhost:3000'\n};\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SocketioService {\n  private socket: Socket;\n\n  constructor() {   }\n\n\n  setupSocketConnection() {\n    this.socket = io(environment.SOCKET_ENDPOINT);\n    this. socket.emit('subscribe', 'MU:MU');\n\n    this.socket.on('onListen', (data: string) => {\n      console.log(data);\n    });\n    \n  }\n\n  sendMessage(message: string) {\n\n  }\n  \n  \n}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}